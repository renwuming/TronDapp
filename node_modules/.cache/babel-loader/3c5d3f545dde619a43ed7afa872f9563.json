{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wkorz/work/tron/RedPacket/RedPacket/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/wkorz/work/tron/RedPacket/RedPacket/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/wkorz/work/tron/RedPacket/RedPacket/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/wkorz/work/tron/RedPacket/RedPacket/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nvar waitForGlobal =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var tronWeb, nodes, connected;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!window.tronWeb) {\n              _context3.next = 9;\n              break;\n            }\n\n            tronWeb = window.tronWeb; // 2. check node connection，检查所需要的API是否都可以连通\n\n            _context3.next = 4;\n            return tronWeb.isConnected();\n\n          case 4:\n            nodes = _context3.sent;\n            connected = !Object.entries(nodes).map(function (_ref2) {\n              var _ref3 = _slicedToArray(_ref2, 2),\n                  name = _ref3[0],\n                  connected = _ref3[1];\n\n              if (!connected) {\n                console.error(\"Error: \".concat(name, \" is not connected\"));\n              }\n\n              return connected;\n            }).includes(false);\n\n            if (connected) {\n              // 3. 如果一切正常，启动react应用。\n              ReactDOM.render(React.createElement(App, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 20\n                },\n                __self: this\n              }), document.getElementById('root'));\n            } else {\n              console.error(\"Error: TRON node is not connected\");\n              console.error('wait for tronLink');\n              setTimeout(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return waitForGlobal();\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              })), 100);\n            }\n\n            _context3.next = 11;\n            break;\n\n          case 9:\n            // 如果检测到没有注入tronWeb对象，则等待100ms后重新检测\n            console.error('wait for tronLink');\n            setTimeout(\n            /*#__PURE__*/\n            _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee2() {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return waitForGlobal();\n\n                    case 2:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2, this);\n            })), 100);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function waitForGlobal() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nwaitForGlobal().then();","map":{"version":3,"sources":["/Users/wkorz/work/tron/RedPacket/RedPacket/src/index.js"],"names":["React","ReactDOM","App","waitForGlobal","window","tronWeb","isConnected","nodes","connected","Object","entries","map","name","console","error","includes","render","document","getElementById","setTimeout","then"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,IAAIC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEZC,MAAM,CAACC,OAFK;AAAA;AAAA;AAAA;;AAGRA,YAAAA,OAHQ,GAGED,MAAM,CAACC,OAHT,EAIZ;;AAJY;AAAA,mBAKQA,OAAO,CAACC,WAAR,EALR;;AAAA;AAKNC,YAAAA,KALM;AAMNC,YAAAA,SANM,GAMM,CAACC,MAAM,CAACC,OAAP,CAAeH,KAAf,EAAsBI,GAAtB,CAA0B,iBAAuB;AAAA;AAAA,kBAArBC,IAAqB;AAAA,kBAAfJ,SAAe;;AAChE,kBAAI,CAACA,SAAL,EAAgB;AACZK,gBAAAA,OAAO,CAACC,KAAR,kBAAwBF,IAAxB;AACH;;AACD,qBAAOJ,SAAP;AACH,aALkB,EAKhBO,QALgB,CAKP,KALO,CANP;;AAYZ,gBAAIP,SAAJ,EAAc;AACV;AACAP,cAAAA,QAAQ,CAACe,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACH,aAHD,MAGO;AACHL,cAAAA,OAAO,CAACC,KAAR;AACAD,cAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;AACAK,cAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,uCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACDhB,aAAa,EADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAD,IAEP,GAFO,CAAV;AAGH;;AArBW;AAAA;;AAAA;AAwBZ;AACAU,YAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;AACAK,YAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,qCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACDhB,aAAa,EADZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,IAEP,GAFO,CAAV;;AA1BY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbA,aAAa;AAAA;AAAA;AAAA,GAAjB;;AAgCAA,aAAa,GAAGiB,IAAhB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nvar waitForGlobal = async () =>{\n    // 1. check variable, 检查tronweb是否已经加载\n    if (window.tronWeb) {\n        let tronWeb = window.tronWeb;\n        // 2. check node connection，检查所需要的API是否都可以连通\n        const nodes = await tronWeb.isConnected();\n        const connected = !Object.entries(nodes).map(([name, connected]) => {\n            if (!connected) {\n                console.error(`Error: ${name} is not connected`);\n            }\n            return connected;\n        }).includes(false);\n        if (connected){\n            // 3. 如果一切正常，启动react应用。\n            ReactDOM.render(<App />, document.getElementById('root'));\n        } else {\n            console.error(`Error: TRON node is not connected`);\n            console.error('wait for tronLink');\n            setTimeout(async () => {\n                await waitForGlobal();\n            }, 100);\n        }\n\n    } else {\n        // 如果检测到没有注入tronWeb对象，则等待100ms后重新检测\n        console.error('wait for tronLink');\n        setTimeout(async () => {\n            await waitForGlobal();\n        }, 100);\n    }\n};\n\nwaitForGlobal().then();\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wkorz/work/tron/tron-test/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as artifact from './contracts/NoSecret';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.refreshBalance =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var tronWeb;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tronWeb = window.tronWeb;\n              console.log(\"getUserKey\");\n              _context.t0 = console;\n              _context.next = 5;\n              return _this.contract.getUserKey().call();\n\n            case 5:\n              _context.t1 = _context.sent;\n\n              _context.t0.log.call(_context.t0, _context.t1);\n\n              console.log(\"getProfit\");\n              _context.t2 = console;\n              _context.next = 11;\n              return _this.contract.getProfit().call();\n\n            case 11:\n              _context.t3 = _context.sent;\n\n              _context.t2.log.call(_context.t2, _context.t3);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    window.tronWeb.setDefaultBlock('latest');\n    _this.contract = null;\n    _this.state = {\n      address: null,\n      balance: null,\n      contract: null,\n      tokenBalance: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var tronWeb, address;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                tronWeb = window.tronWeb;\n                this.setState({\n                  address: tronWeb.defaultAddress.base58\n                });\n                address = tronWeb.address.fromHex(artifact.networks['*'].address);\n                console.log(artifact.abi, artifact.networks['*'].address, address);\n                this.contract = tronWeb.contract(artifact.abi, address);\n                console.log(\"test-------------------------------\");\n                console.log(this.contract); // await this.refreshBalance();\n                //await this.refreshTokenBalance();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n    /*\n    \n        onClick = async () => {\n            let tronWeb = window.tronWeb;\n            const sendTransaction = await tronWeb.trx.sendTransaction(\"TKPzfsXRaDmdKh2GuouXw2eyK2HNH9FNQS\", 1000);\n            //const sendTransaction = await tronWeb.trx.getUser();\n    \n            console.log('- Transaction:\\n' + JSON.stringify(sendTransaction, null, 2), '\\n');\n        };\n    */\n\n  }, {\n    key: \"onCallContract\",\n\n    /*\n        refreshTokenBalance = async () => {\n            let tronWeb = window.tronWeb;\n            this.state.address &&  this.contract.balances(this.state.address).call().then(output => {\n                console.group('Contract \"call\" result');\n                console.log('- Output:', output, '\\n');\n                this.setState({tokenBalance: output.toString()});\n                console.groupEnd();\n            });\n        };\n        */\n    value: function () {\n      var _onCallContract = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var tronWeb, tx;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                tronWeb = window.tronWeb; // 1. register event listener\n\n                this.contract && this.contract.Approval().watch(function (err, event) {\n                  if (err) return console.error('Error with \"Message\" event:', err);\n                  console.group('New event received');\n                  console.log('- Contract Address:', event.contract);\n                  console.log('- Event Name:', event.name);\n                  console.log('- Transaction:', event.transaction);\n                  console.log('- Block number:', event.block);\n                  console.log('- Result:', event.result, '\\n');\n                  console.groupEnd();\n                });\n                this.contract && this.contract.Transfer().watch(function (err, event) {\n                  if (err) return console.error('Error with \"Message\" event:', err);\n                  console.group('New event received');\n                  console.log('- Contract Address:', event.contract);\n                  console.log('- Event Name:', event.name);\n                  console.log('- Transaction:', event.transaction);\n                  console.log('- Block number:', event.block);\n                  console.log('- Result:', event.result, '\\n');\n                  console.groupEnd();\n                }); // 2. send token\n\n                tx = this.contract.transfer(\"TKPzfsXRaDmdKh2GuouXw2eyK2HNH9FNQS\", 100).send().then(function (output) {\n                  console.group('Contract \"getLast\" result');\n                  console.log('- Output:', output, '\\n');\n                  console.groupEnd();\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onCallContract() {\n        return _onCallContract.apply(this, arguments);\n      }\n\n      return onCallContract;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"current address\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.state.address), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"current trx balance\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.state.balance), React.createElement(\"button\", {\n        onClick: this.refreshBalance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Refresh balance\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"current token balance\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.tokenBalance), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wkorz/work/tron/tron-test/src/App.js"],"names":["React","Component","artifact","App","props","refreshBalance","tronWeb","window","console","log","contract","getUserKey","call","getProfit","setDefaultBlock","state","address","balance","tokenBalance","setState","defaultAddress","base58","fromHex","networks","abi","Approval","watch","err","event","error","group","name","transaction","block","result","groupEnd","Transfer","tx","transfer","send","then","output"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as artifact from './contracts/NoSecret'\n\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        window.tronWeb.setDefaultBlock('latest');\n\n        this.contract = null;\n        this.state = {\n            address : null,\n            balance : null,\n            contract : null,\n            tokenBalance: null,\n        }\n    }\n\n    async componentDidMount() {\n\n        let tronWeb = window.tronWeb;\n        this.setState({address : tronWeb.defaultAddress.base58});\n        let address = tronWeb.address.fromHex(artifact.networks['*'].address);\n        console.log(artifact.abi, artifact.networks['*'].address, address)\n        this.contract = tronWeb.contract(artifact.abi, address);\n        console.log(\"test-------------------------------\")\n        console.log(this.contract)\n       // await this.refreshBalance();\n       //await this.refreshTokenBalance();\n    }\n/*\n\n    onClick = async () => {\n        let tronWeb = window.tronWeb;\n        const sendTransaction = await tronWeb.trx.sendTransaction(\"TKPzfsXRaDmdKh2GuouXw2eyK2HNH9FNQS\", 1000);\n        //const sendTransaction = await tronWeb.trx.getUser();\n\n        console.log('- Transaction:\\n' + JSON.stringify(sendTransaction, null, 2), '\\n');\n    };\n*/\n    refreshBalance = async () => {\n        let tronWeb = window.tronWeb;\n        console.log(\"getUserKey\");\n        console.log(await this.contract.getUserKey().call());\n        console.log(\"getProfit\");\n        console.log(await this.contract.getProfit().call());\n        //this.state.address && (this.setState({balance : await this.contract.getUserKey().call()}));\n        //this.state.address && (this.setState({balance : await tronWeb.getUser()}));\n    };\n/*\n    refreshTokenBalance = async () => {\n        let tronWeb = window.tronWeb;\n        this.state.address &&  this.contract.balances(this.state.address).call().then(output => {\n            console.group('Contract \"call\" result');\n            console.log('- Output:', output, '\\n');\n            this.setState({tokenBalance: output.toString()});\n            console.groupEnd();\n        });\n    };\n    */\n\n\n    async onCallContract () {\n        let tronWeb = window.tronWeb;\n\n        // 1. register event listener\n        this.contract && this.contract.Approval().watch((err, event) => {\n            if(err)\n                return console.error('Error with \"Message\" event:', err);\n\n            console.group('New event received');\n            console.log('- Contract Address:', event.contract);\n            console.log('- Event Name:', event.name);\n            console.log('- Transaction:', event.transaction);\n            console.log('- Block number:', event.block);\n            console.log('- Result:', event.result, '\\n');\n            console.groupEnd();\n        });\n\n        this.contract && this.contract.Transfer().watch((err, event) => {\n            if(err)\n                return console.error('Error with \"Message\" event:', err);\n\n            console.group('New event received');\n            console.log('- Contract Address:', event.contract);\n            console.log('- Event Name:', event.name);\n            console.log('- Transaction:', event.transaction);\n            console.log('- Block number:', event.block);\n            console.log('- Result:', event.result, '\\n');\n            console.groupEnd();\n        });\n\n\n        // 2. send token\n         let tx = this.contract.transfer(\"TKPzfsXRaDmdKh2GuouXw2eyK2HNH9FNQS\", 100).send().then(output => {\n            console.group('Contract \"getLast\" result');\n            console.log('- Output:', output, '\\n');\n            console.groupEnd();\n        });\n\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    <p>current address</p>\n                    <p>{this.state.address}</p>\n                    <hr></hr>\n                </div>\n                    <p>current trx balance</p>\n                    <p>{this.state.balance}</p>\n                    <button onClick={this.refreshBalance}>Refresh balance</button>\n                    <hr></hr>\n                <div>\n                </div>\n                    <p>current token balance</p>\n                    <p>{this.state.tokenBalance}</p>\n                    <hr></hr>\n                <div>\n                    <hr></hr>\n                </div>\n                <div>\n                    <hr></hr>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
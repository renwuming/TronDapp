{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wkorz/work/tron/tron-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wkorz/work/tron/tron-test/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as artifact from './contracts/NoSecret';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.checkUser =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var result_0;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.contract.checkUser().call();\n\n            case 2:\n              result_0 = _context.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.getUser_key =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var user_key;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this.contract.getUser_key().call();\n\n            case 2:\n              user_key = _context2.sent;\n              console.log(user_key);\n\n              _this.setState({\n                result_0: JSON.stringify(user_key)\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.createUser =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var circle_join, result_0;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              circle_join = [1, 2];\n              _context3.next = 3;\n              return _this.contract.createUser(circle_join).send();\n\n            case 3:\n              result_0 = _context3.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.getCircleKey =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var result_0;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this.contract.getCircleKey().call();\n\n            case 2:\n              result_0 = _context4.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n    _this.getCreatefee =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var createfee;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this.contract.getCreatefee().call();\n\n            case 2:\n              createfee = _context5.sent;\n\n              _this.setState({\n                createfee: createfee\n              });\n\n              console.log(createfee);\n\n              _this.setState({\n                result_0: JSON.stringify(createfee)\n              });\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n    _this.createCircle =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var fee, callfee, result_0;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fee = 1000000;\n              callfee = 0;\n\n              if (fee > 0) {\n                callfee = _this.createfee;\n              } //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n\n\n              _context6.next = 5;\n              return _this.contract.createCircle(fee).send({\n                feeLimit: 100000000,\n                callValue: callfee,\n                shouldPollResponse: true\n              });\n\n            case 5:\n              result_0 = _context6.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n    _this.joinCircle =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      var circle_keys, callfee, result_0;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              circle_keys = [1];\n              callfee = 0; //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n\n              _context7.next = 4;\n              return _this.contract.joinCircle(circle_keys).send({\n                feeLimit: 10000000,\n                callValue: callfee,\n                shouldPollResponse: true\n              });\n\n            case 4:\n              result_0 = _context7.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n    _this.createMessage =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8() {\n      var circle_key, callfee, result_0;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              circle_key = 1;\n              callfee = 0; //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n\n              _context8.next = 4;\n              return _this.contract.createMessage(circle_key).send({\n                feeLimit: 10000000,\n                callValue: callfee,\n                shouldPollResponse: true\n              });\n\n            case 4:\n              result_0 = _context8.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n    _this.payMessage =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var message_key, money, callfee, result_0, r;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              message_key = 1;\n              money = 0.000001;\n              callfee = money * 100000000; ///100trx\n              //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n\n              _context9.next = 5;\n              return _this.contract.payMessage(message_key, callfee).send({\n                feeLimit: 1000000000,\n                callValue: callfee,\n                shouldPollResponse: true\n              });\n\n            case 5:\n              result_0 = _context9.sent;\n              _context9.next = 8;\n              return _this.contract.payMessage().watch();\n\n            case 8:\n              r = _context9.sent;\n              console.log(result_0);\n              console.log(\"------\");\n              console.log(r);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n    _this.getCircle =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee10() {\n      var result_0;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _this.contract.getCircle(2).call();\n\n            case 2:\n              result_0 = _context10.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n    _this.getUser =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee11() {\n      var result_0;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _this.contract.getUser().call();\n\n            case 2:\n              result_0 = _context11.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n    _this.getMessage =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee12() {\n      var result_0;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _this.contract.getMessage(1).call();\n\n            case 2:\n              result_0 = _context12.sent;\n              console.log(result_0);\n\n              _this.setState({\n                result_0: JSON.stringify(result_0)\n              });\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n    _this.function_1 =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee13() {\n      var result_1;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _this.contract.getUserKey().call();\n\n            case 2:\n              result_1 = _context13.sent;\n              console.log(result_1);\n\n              _this.setState({\n                result_1: JSON.stringify(result_1)\n              });\n\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n    _this.function_1 =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee14() {\n      var result_1;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _this.contract.getUserKey().call();\n\n            case 2:\n              result_1 = _context14.sent;\n              console.log(result_1);\n\n              _this.setState({\n                result_1: JSON.stringify(result_1)\n              });\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n    _this.function_2 =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee15() {\n      var result_2;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return _this.contract.getUserKey().call();\n\n            case 2:\n              result_2 = _context15.sent;\n              console.log(result_2);\n\n              _this.setState({\n                result_2: JSON.stringify(result_2)\n              });\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n    window.tronWeb.setDefaultBlock('latest');\n    _this.contract = null;\n    _this.state = {\n      address: null,\n      balance: null,\n      contract: null,\n      tokenBalance: null,\n      result_0: null,\n      result_1: null,\n      result_2: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16() {\n        var tronWeb, address;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                tronWeb = window.tronWeb;\n                console.log('address', tronWeb.defaultAddress.base58);\n                this.setState({\n                  address: tronWeb.defaultAddress.base58\n                });\n                address = tronWeb.address.fromHex(artifact.networks['*'].address);\n                console.log(artifact.abi, artifact.networks['*'].address, address);\n                this.contract = tronWeb.contract(artifact.abi, address);\n                console.log(this.contract); //await this.getCircleKey();\n                //await this.getCircle();\n                //await this.getUser();\n                //await this.createMessage();\n                //await this.getMessage();\n\n                _context16.next = 9;\n                return this.payMessage();\n\n              case 9:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() //首次登录，注册用户\n    //判断是否首次登录\n    //true 表示已经注册，false表示第一次登录，需要注册\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"current address\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, this.state.address), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"current trx balance\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, this.state.result_0), React.createElement(\"button\", {\n        onClick: this.refreshBalance,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Refresh balance\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"function 1\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, this.state.result_1), React.createElement(\"button\", {\n        onClick: this.function_1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"test function 1\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"function 2\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, this.state.result_2), React.createElement(\"button\", {\n        onClick: this.function_2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"test function 2\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wkorz/work/tron/tron-test/src/App.js"],"names":["React","Component","artifact","App","props","checkUser","contract","call","result_0","console","log","setState","JSON","stringify","getUser_key","user_key","createUser","circle_join","send","getCircleKey","getCreatefee","createfee","createCircle","fee","callfee","feeLimit","callValue","shouldPollResponse","joinCircle","circle_keys","createMessage","circle_key","payMessage","message_key","money","watch","r","getCircle","getUser","getMessage","function_1","getUserKey","result_1","function_2","result_2","window","tronWeb","setDefaultBlock","state","address","balance","tokenBalance","defaultAddress","base58","fromHex","networks","abi","refreshBalance"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as artifact from './contracts/NoSecret'\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        window.tronWeb.setDefaultBlock('latest');\n\n        this.contract = null;\n        this.state = {\n            address: null,\n            balance: null,\n            contract: null,\n            tokenBalance: null,\n            result_0: null,\n            result_1: null,\n            result_2: null\n        }\n    }\n\n    async componentDidMount() {\n\n        let tronWeb = window.tronWeb;\n        console.log('address', tronWeb.defaultAddress.base58)\n        this.setState({address: tronWeb.defaultAddress.base58});\n        let address = tronWeb.address.fromHex(artifact.networks['*'].address);\n        console.log(artifact.abi, artifact.networks['*'].address, address)\n        this.contract = tronWeb.contract(artifact.abi, address);\n        console.log(this.contract)\n        //await this.getCircleKey();\n        //await this.getCircle();\n        //await this.getUser();\n        //await this.createMessage();\n        //await this.getMessage();\n        await this.payMessage();\n        //await this.createCircle();\n        // await this.refreshTokenBalance();\n    }\n\n//首次登录，注册用户\n    //判断是否首次登录\n    //true 表示已经注册，false表示第一次登录，需要注册\n    checkUser = async () => {\n        let result_0 = await this.contract.checkUser().call()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //获取用户的key，用key从后端拿用户的数据\n    getUser_key = async () => {\n        let user_key = await this.contract.getUser_key().call()\n        console.log(user_key)\n        this.setState({result_0:JSON.stringify(user_key)})\n    };\n\n    //仅第一次登录时使用\n    //创建用户，参数是一个数组[],里面的值是circle_key\n    createUser = async () => {\n        let circle_join = [1,2];\n        let result_0 = await this.contract.createUser(circle_join).send()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //测试用\n    getCircleKey = async () => {\n        let result_0 = await this.contract.getCircleKey().call()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //获取创建付费圈子所需的手续费\n    //免费圈子手续费位0\n    getCreatefee = async () => {\n        let createfee = await this.contract.getCreatefee().call()\n        this.setState({createfee});\n        console.log(createfee)\n        this.setState({result_0:JSON.stringify(createfee)})\n    };\n    \n\n    //创建圈子，参数是一个整数，是加入这个圈子需要收取的费用，0则表示免费\n    //\n    createCircle = async () => {\n        let fee = 1000000; \n        let callfee = 0;\n        if (fee > 0){\n            callfee = this.createfee;\n        }\n        \n        //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n        let result_0 = await this.contract.createCircle(fee).send({\n            feeLimit:100000000,\n            callValue:callfee,\n            shouldPollResponse:true\n            })\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //加入圈子,参数是一个数组，表示要加入圈子的key\n    joinCircle = async () => {\n        let circle_keys = [1];\n        let callfee = 0;\n        //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n        let result_0 = await this.contract.joinCircle(circle_keys).send({\n            feeLimit:10000000,\n            callValue:callfee,\n            shouldPollResponse:true\n            })\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //发布文章，参数是文章要发表到的圈子的key\n    //1. 该圈子存在\n    //2. 已经加入了该圈子\n    createMessage = async () => {\n        let circle_key = 1;\n        let callfee = 0;\n        //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n        let result_0 = await this.contract.createMessage(circle_key).send({\n            feeLimit:10000000,\n            callValue:callfee,\n            shouldPollResponse:true\n            })\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    //打赏文章，参数两个 --- 文章的key， 要打赏的金额\n    payMessage = async () => {\n        let message_key = 1;\n        let money = 0.000001;\n        let callfee = money * 100000000; ///100trx\n        //await tronWeb.transactionBuilder.sendTrx(\"TXPHCzmAmjyERtWES6EXTYqUPfJfQSzp2m\",1000);\n        let result_0 = await this.contract.payMessage(message_key,callfee).send({\n            feeLimit:1000000000,\n            callValue:callfee,\n            shouldPollResponse:true\n            })\n        let r = await this.contract.payMessage().watch();\n        console.log(result_0);\n        console.log(\"------\");\n        console.log(r);\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    \n\n\n    getCircle = async () => {\n        let result_0 = await this.contract.getCircle(2).call()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    getUser = async () => {\n        let result_0 = await this.contract.getUser().call()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    getMessage = async () => {\n        let result_0 = await this.contract.getMessage(1).call()\n        console.log(result_0)\n        this.setState({result_0:JSON.stringify(result_0)})\n    };\n\n    function_1 = async () => {\n        let result_1 = await this.contract.getUserKey().call()\n        console.log(result_1)\n        this.setState({result_1:JSON.stringify(result_1)})\n    };\n\n    function_1 = async () => {\n        let result_1 = await this.contract.getUserKey().call()\n        console.log(result_1)\n        this.setState({result_1:JSON.stringify(result_1)})\n    };\n\n    function_2 = async () => {\n        let result_2 = await this.contract.getUserKey().call()\n        console.log(result_2)\n        this.setState({result_2:JSON.stringify(result_2)})\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div>\n                    <p>current address</p>\n                    <p>{this.state.address}</p>\n                    <hr></hr>\n                </div>\n                <div>\n                    <p>current trx balance</p>\n                    <p>{this.state.result_0}</p>\n                    <button onClick={this.refreshBalance}>Refresh balance</button>\n                    <hr></hr>\n                </div>\n\n                <div>\n                    <p>function 1</p>\n                    <p>{this.state.result_1}</p>\n                    <button onClick={this.function_1}>test function 1</button>\n                    <hr></hr>\n                </div>\n                <div>\n                    <p>function 2</p>\n                    <p>{this.state.result_2}</p>\n                    <button onClick={this.function_2}>test function 2</button>\n                    <hr></hr>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}